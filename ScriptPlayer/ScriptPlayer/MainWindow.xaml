<Window x:Class="ScriptPlayer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:shared="clr-namespace:ScriptPlayer.Shared;assembly=ScriptPlayer.Shared"
        xmlns:converters="clr-namespace:ScriptPlayer.Shared.Converters;assembly=ScriptPlayer.Shared"
        xmlns:converters1="clr-namespace:ScriptPlayer.Converters"
        xmlns:scriptPlayer="clr-namespace:ScriptPlayer"
        xmlns:viewModels="clr-namespace:ScriptPlayer.ViewModels"
        xmlns:controls="clr-namespace:ScriptPlayer.Shared.Controls;assembly=ScriptPlayer.Shared"
        xmlns:fa="clr-namespace:FontAwesome.Net;assembly=FontAwesome.Net"
        mc:Ignorable="d" PreviewKeyDown="MainWindow_OnPreviewKeyDown" Closing="MainWindow_OnClosing"
        DataContext="{Binding RelativeSource={RelativeSource Self}, Path=ViewModel}"
        Topmost="{Binding Settings.StayOnTop}"
        Height="591" Width="954" Loaded="Window_Loaded" Icon="ScriptPlayerIcon.ico">
    <Window.Style>
        <Style TargetType="Window">
            <Setter Property="Title" Value="{Binding Path=Title, StringFormat={}ScriptPlayer - {0}}"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=Title}" Value="">
                    <Setter Property="Title" Value="ScriptPlayer"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </Window.Style>
    <Window.Resources>
        <converters1:TimeLeftConverter x:Key="TimeLeftConverter"/>
        <converters:ConversionModeToNameConverter x:Key="ConversionConverter"/>
        <converters1:DistinctValueToBooleanConverter x:Key="BooleanConverter"/>
        <converters1:TimeSpanToMillisecondsConverter x:Key="MillisecondsConverter"/>
        <converters:BooleanToColumnSpanConverter x:Key="ColumnSpanConverter" OnFalse="1" OnTrue="2" />
        <converters:BooleanInverter x:Key="Inverter"/>
        <BooleanToVisibilityConverter x:Key="VisibilityConverter"/>

        <!-- Used in code -->
        <!-- ReSharper disable Xaml.RedundantResource -->
        <DataTemplate x:Key="SkipButton">
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="Skip" Margin="0,0,8,0" VerticalAlignment="Center"/>
                <TextBlock FontFamily="Webdings" Text="8" VerticalAlignment="Center"/>
            </StackPanel>
        </DataTemplate>
        <DataTemplate x:Key="SkipNextButton">
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="Next" Margin="0,0,8,0" VerticalAlignment="Center"/>
                <TextBlock FontFamily="Webdings" Text=":" VerticalAlignment="Center"/>
            </StackPanel>
        </DataTemplate>
        <!-- ReSharper restore Xaml.RedundantResource -->
    </Window.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="383*"/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <Grid Name="GridVideo" Grid.Row="1" Grid.ColumnSpan="{Binding ElementName=GridSettings, Path=(shared:HideOnHover.IsActive), Mode=OneWay, Converter={StaticResource ColumnSpanConverter}}"
              Background="Black" MouseLeftButtonDown="VideoPlayer_OnMouseLeftButtonDown" AllowDrop="True" Drop="GridVideo_Drop">
            <!-- VIDEO PLAYER -->
            <shared:VideoPlayer Volume="{Binding Volume}" HideMouse="true" x:Name="VideoPlayer">
                <shared:VideoPlayer.Style>
                    <Style TargetType="{x:Type shared:VideoPlayer}">
                        <Setter Property="Visibility" Value="Hidden"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding PlaybackMode}" Value="{x:Static viewModels:PlaybackMode.Local}">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding BlurVideo}" Value="true">
                                <Setter Property="Effect">
                                    <Setter.Value>
                                        <BlurEffect RenderingBias="Performance" KernelType="Gaussian" Radius="100"/>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </shared:VideoPlayer.Style>
            </shared:VideoPlayer>
            <scriptPlayer:FlashOverlay HorizontalAlignment="Stretch" VerticalAlignment="Stretch" x:Name="FlashOverlay"/>

            <!-- Fade tests -->
            <!--
            <Grid>
                <DockPanel LastChildFill="False">
                    <StackPanel Orientation="Horizontal" DockPanel.Dock="Left">
                        <ProgressBar Orientation="Vertical" Minimum="0" Maximum="100" Width="20" Value="{Binding ElementName=VideoPlayer, Path=Volume}"/>
                        <ProgressBar Orientation="Vertical" Minimum="0" Maximum="100" Width="20" Value="{Binding ElementName=VideoPlayer, Path=StandByVolume}"/>
                        <ProgressBar Orientation="Vertical" Minimum="0" Maximum="1" Width="20" Value="{Binding ElementName=VideoPlayer, Path=Border.Opacity}"/>
                    </StackPanel>
                    <StackPanel Orientation="Vertical" DockPanel.Dock="Right">
                        <Rectangle Width="300" Height="200" Fill="{Binding ElementName=VideoPlayer, Path=VideoBrush}"/>
                        <Rectangle Width="300" Height="200" Fill="{Binding ElementName=VideoPlayer, Path=StandByBrush}"/>
                    </StackPanel>
                </DockPanel>
            </Grid>
            -->

            <!-- BLIND MODE -->
            <Grid IsHitTestVisible="False">
                <Grid.Style>
                    <Style TargetType="{x:Type Grid}">
                        <Setter Property="Visibility" Value="Hidden"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding PlaybackMode}" Value="{x:Static viewModels:PlaybackMode.Blind}">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
                <TextBlock Text="Blind Mode" Foreground="White" FontSize="50" HorizontalAlignment="Center" VerticalAlignment="Center"/>
            </Grid>

            <!-- WHIRLIGIG -->
            <Grid IsHitTestVisible="False">
                <Grid.Style>
                    <Style TargetType="{x:Type Grid}">
                        <Setter Property="Visibility" Value="Hidden"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding PlaybackMode}" Value="{x:Static viewModels:PlaybackMode.Whirligig}">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
                <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                    <TextBlock Text="Whirligig" Foreground="White" FontSize="50" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center"/>
                    <TextBlock Foreground="White" FontSize="20" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center">
                        <TextBlock.Style>
                            <Style TargetType="{x:Type TextBlock}">
                                <Setter Property="Text" Value="Not Connected.&#x0d;&#x0a;Start Whirligig and activate 'Timecode Server'&#x0d;&#x0a; in the settings tab 'General 1'."/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding TimeSource.IsConnected}" Value="true">
                                        <Setter Property="Text" Value="Connected"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </StackPanel>
            </Grid>

            <!-- VLC -->
            <Grid IsHitTestVisible="False">
                <Grid.Style>
                    <Style TargetType="{x:Type Grid}">
                        <Setter Property="Visibility" Value="Hidden"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding PlaybackMode}" Value="{x:Static viewModels:PlaybackMode.Vlc}">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
                <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                    <TextBlock Text="VLC" Foreground="White" FontSize="50" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center"/>
                    <TextBlock Foreground="White" FontSize="20" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center">
                        <TextBlock.Style>
                            <Style TargetType="{x:Type TextBlock}">
                                <Setter Property="Text" Value="Not Connected.&#x0d;&#x0a;Start VLC and activate the webinterface in the preferences."/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding TimeSource.IsConnected}" Value="true">
                                        <Setter Property="Text" Value="Connected"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </StackPanel>
            </Grid>


            <!-- MPC-HC -->
            <Grid IsHitTestVisible="False">
                <Grid.Style>
                    <Style TargetType="{x:Type Grid}">
                        <Setter Property="Visibility" Value="Hidden"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding PlaybackMode}" Value="{x:Static viewModels:PlaybackMode.MpcHc}">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
                <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                    <TextBlock Text="MPC-HC" Foreground="White" FontSize="50" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center"/>
                    <TextBlock Foreground="White" FontSize="20" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center">
                        <TextBlock.Style>
                            <Style TargetType="{x:Type TextBlock}">
                                <Setter Property="Text" Value="Not Connected.&#x0d;&#x0a;Start MPC-HC and activate the webinterface in the preferences."/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding TimeSource.IsConnected}" Value="true">
                                        <Setter Property="Text" Value="Connected"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </StackPanel>
            </Grid>

            <!-- Samsung VR -->
            <Grid IsHitTestVisible="False">
                <Grid.Style>
                    <Style TargetType="{x:Type Grid}">
                        <Setter Property="Visibility" Value="Hidden"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding PlaybackMode}" Value="{x:Static viewModels:PlaybackMode.SamsungVr}">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
                <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                    <TextBlock Text="Samsung VR" Foreground="White" FontSize="50" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center"/>
                    <TextBlock Foreground="White" FontSize="20" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center">
                        <TextBlock.Style>
                            <Style TargetType="{x:Type TextBlock}">
                                <Setter Property="Text" Value="No data received.&#x0d;&#x0a;Start Samsung VR and make sure 'Presentation mode' is activated in the settings menu."/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding TimeSource.IsConnected}" Value="true">
                                        <Setter Property="Text" Value="Connected"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </StackPanel>
            </Grid>

            <!-- Zoom Player -->
            <Grid IsHitTestVisible="False">
                <Grid.Style>
                    <Style TargetType="{x:Type Grid}">
                        <Setter Property="Visibility" Value="Hidden"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding PlaybackMode}" Value="{x:Static viewModels:PlaybackMode.ZoomPlayer}">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
                <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                    <TextBlock Text="Zoom Player" Foreground="White" FontSize="50" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center"/>
                    <TextBlock Foreground="White" FontSize="20" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center">
                        <TextBlock.Style>
                            <Style TargetType="{x:Type TextBlock}">
                                <Setter Property="Text" Value="Not Connected.&#x0d;&#x0a;Start Zoom Player and enable External TCP Control (Advanced Mode - System)."/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding TimeSource.IsConnected}" Value="true">
                                        <Setter Property="Text" Value="Connected"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </StackPanel>
            </Grid>

            <!-- ICON AND VERSION -->
            <Grid IsHitTestVisible="False" Visibility="{Binding ShowBanner, Converter={StaticResource VisibilityConverter}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="3*"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="3*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Viewbox StretchDirection="DownOnly" Grid.Column="1"  Grid.Row="1">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <Image Width="512" Height="512" Source="Images/ScriptPlayerIcon.png"/>

                        <TextBlock Foreground="White" Grid.Row="1" Text="{Binding Path=Version.VersionText}" FontSize="40" FontWeight="DemiBold" TextAlignment="Center" HorizontalAlignment="Stretch">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Settings.CheckForNewVersionOnStartup}" Value="False">
                                            <Setter Property="Visibility" Value="Hidden"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>

                        <TextBlock Foreground="White" Grid.Row="2" Text="Check Help / About for details" FontSize="40" FontWeight="DemiBold" TextAlignment="Center" HorizontalAlignment="Stretch">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Version.CanDownload}" Value="False">
                                            <Setter Property="Visibility" Value="Hidden"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>

                        <TextBlock Foreground="White" Grid.Row="1" Text="{Binding Path=Version.InstalledVersion, StringFormat={}ScriptPlayer {0}}" FontSize="40" FontWeight="DemiBold" TextAlignment="Center" HorizontalAlignment="Stretch">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Settings.CheckForNewVersionOnStartup}" Value="True">
                                            <Setter Property="Visibility" Value="Hidden"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </Grid>
                </Viewbox>
            </Grid>

            <!-- SCRIPT POSITIONS -->
            <ProgressBar Visibility="{Binding Settings.ShowScriptPositions, Converter={StaticResource VisibilityConverter}}" Minimum="0" Maximum="1" Value="{Binding CurrentPosition}" Orientation="Vertical" HorizontalAlignment="Left" Margin="10,10,0,10" Width="32"/>

            <Grid IsHitTestVisible="False" Visibility="{Binding Settings.ShowScriptPositions, Converter={StaticResource VisibilityConverter}}" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Height="60" >
                <Grid.Background>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="#00000000" Offset="0"/>
                        <GradientStop Color="#7F000000" Offset="1"/>
                        <GradientStop Color="#7F000000" Offset="0.331"/>
                    </LinearGradientBrush>
                </Grid.Background>
                <shared:TimeLineHeader ClipToBounds="True" Background="Transparent" ViewPort="{Binding PositionsViewport, Mode=TwoWay}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Marker="{Binding Path=TimeSource.Progress, Mode=OneWay}"></shared:TimeLineHeader>
                <shared:PositionBar ClipToBounds="True" TotalDisplayedDuration="{Binding PositionsViewport, Mode=OneWay}" IsReadOnly="True" Positions="{Binding Positions}" Progress="{Binding Path=TimeSource.Progress}"/>
            </Grid>

            <!-- NOTIFICATIONS -->
            <shared:NotificationList x:Name="Notifications" Margin="10">
                <shared:NotificationList.Resources>
                    <DataTemplate DataType="{x:Type shared:NotificationCommand}">
                        <Button Command="{Binding Command}" Margin="0,0,0,8" Padding="8,0,8,4" SnapsToDevicePixels="True" Background="#FF3E4587" 
                                TextElement.Foreground="White" TextElement.FontSize="20"
                                BorderThickness="1" BorderBrush="LightGray" HorizontalAlignment="Left" VerticalAlignment="Top" Content="{Binding Content}">
                        </Button>
                    </DataTemplate>
                    <DataTemplate DataType="{x:Type shared:Notification}">
                        <Border Margin="0,0,0,8" Padding="8,0,8,4" SnapsToDevicePixels="True" Background="DimGray" BorderThickness="1" BorderBrush="LightGray" 
                                HorizontalAlignment="Left" VerticalAlignment="Top">

                            <Border.Resources>
                                <Style TargetType="{x:Type ContentControl}">
                                    <Setter Property="TextElement.FontSize" Value="20"/>
                                    <Setter Property="TextElement.Foreground" Value="White"/>
                                    <Setter Property="HorizontalAlignment" Value="Left"/>
                                </Style>
                            </Border.Resources>
                            <ContentControl Content="{Binding Content}"/>
                        </Border>
                    </DataTemplate>
                </shared:NotificationList.Resources>
            </shared:NotificationList>
        </Grid>
        
        <!-- MAIN MENU -->

        <Grid Name="MnuMain" Grid.Row="0" Grid.ColumnSpan="2" Grid.Column="0" Background="#FFF0F0F0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Menu Grid.Row="0">
                <MenuItem Header="File">
                    <MenuItem Header="Open Video" Command="{Binding OpenVideoCommand}"/>
                    <MenuItem Header="Open Script" Command="{Binding OpenScriptCommand}"/>
                    <Separator/>
                    <MenuItem Header="Add to Playlist" Command="{Binding AddScriptsToPlaylistCommand}"/>
                    <MenuItem Header="Show Playlist" Click="mnuShowPlaylist_Click"/>
                </MenuItem>
                <MenuItem Header="Devices">
                    <MenuItem Header="Show Devices" Click="mnuShowDevices_Click"/>
                    <Separator/>
                    <MenuItem Command="{Binding ConnectLaunchDirectlyCommand}" IsEnabled="{Binding CanDirectConnectLaunch}" ToolTipService.ShowOnDisabled="True">
                        <MenuItem.Header>
                            <TextBlock Text="Connect Launch directly">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Style.Triggers>
                                            <Trigger Property="IsEnabled" Value="False">
                                                <Setter Property="Foreground" Value="DarkGray"></Setter>
                                                <Setter Property="TextDecorations" Value="{x:Static TextDecorations.Strikethrough}"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </MenuItem.Header>
                        <MenuItem.Style>
                            <Style TargetType="MenuItem">
                                <Style.Triggers>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="ToolTip" Value="This feature requires Win10 15063 or higher"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </MenuItem.Style>
                    </MenuItem>
                    <MenuItem>
                        <MenuItem.Header>
                            <TextBlock>
                            <Run Text="Buttplug "/>
                            <Run Text="{Binding ButtplugApiVersion}"/>
                            </TextBlock>
                        </MenuItem.Header>
                        <MenuItem Header="Connect" Command="{Binding ConnectButtplugCommand}"/>
                        <MenuItem Header="Disconnect" Command="{Binding DisconnectButtplugCommand}"/>
                        <MenuItem Header="Scan for Devices" Command="{Binding StartScanningButtplugCommand}"/>
                    </MenuItem>
                </MenuItem>
                <MenuItem Header="Video Player">
                    <MenuItem Header="Local" IsCheckable="True" IsChecked="{Binding Path=PlaybackMode, Mode=TwoWay, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PlaybackMode.Local}}"/>
                    <MenuItem Header="None (Script Only)" IsCheckable="True" IsChecked="{Binding Path=PlaybackMode, Mode=TwoWay, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PlaybackMode.Blind}}"/>
                    <Separator/>
                    <MenuItem Header="MPC-HC" IsCheckable="True" IsChecked="{Binding Path=PlaybackMode, Mode=TwoWay, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PlaybackMode.MpcHc}}"/>
                    <MenuItem Header="Samsung VR" IsCheckable="True" IsChecked="{Binding Path=PlaybackMode, Mode=TwoWay, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PlaybackMode.SamsungVr}}"/>
                    <MenuItem Header="VLC" IsCheckable="True" IsChecked="{Binding Path=PlaybackMode, Mode=TwoWay, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PlaybackMode.Vlc}}"/>
                    <MenuItem Header="Whirligig" IsCheckable="True" IsChecked="{Binding Path=PlaybackMode, Mode=TwoWay, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PlaybackMode.Whirligig}}"/>
                    <MenuItem Header="Zoom Player" IsCheckable="True" IsChecked="{Binding Path=PlaybackMode, Mode=TwoWay, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PlaybackMode.ZoomPlayer}}"/>
                </MenuItem>
                <MenuItem Header="Playback">
                    <MenuItem Header="Loop">
                        <MenuItem Header="Set A" Command="{Binding SetLoopACommand}"/>
                        <MenuItem Header="Set B" Command="{Binding SetLoopBCommand}"/>
                        <MenuItem Header="Clear" Command="{Binding ClearLoopCommand}"/>
                    </MenuItem>
                </MenuItem>
                <MenuItem Header="View">
                    <MenuItem Header="Toggle Fullscreen" Command="{Binding ToggleFullScreenCommand}"/>
                    <MenuItem Header="Stay On Top" IsCheckable="True" IsChecked="{Binding Path=Settings.StayOnTop, Mode=TwoWay}"/>
                </MenuItem>
                <MenuItem Header="Settings" Click="mnuSettings_Click">
                </MenuItem>
                <MenuItem Header="Help">
                    <MenuItem Header="Documentation (Online)" Click="mnuDocs_Click"/>
                    <MenuItem Header="About / Check for new Version" Click="mnuVersion_Click"/>
                </MenuItem>
            </Menu>
            <ToolBar Grid.Row="1" Background="#FFF0F0F0">
                <Button Command="{Binding OpenScriptCommand}">
                    <Grid Width="16" Height="16">
                        <controls:AwesomeTextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{x:Static fa:FontAwesome.fa_folder_open}"/>
                    </Grid>
                </Button>
                <Button Command="{Binding AddScriptsToPlaylistCommand}">
                    <Grid Width="16" Height="16">
                        <controls:AwesomeTextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{x:Static fa:FontAwesome.fa_plus}"/>
                    </Grid>
                </Button>
                <Button Click="mnuShowPlaylist_Click">
                    <Grid Width="16" Height="16">
                        <controls:AwesomeTextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{x:Static fa:FontAwesome.fa_list}"/>
                    </Grid>
                </Button>
                <CheckBox ToolTip="Shuffle" IsChecked="{Binding Playlist.Shuffle}"
                              HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <Grid Width="16" Height="16">
                        <controls:AwesomeTextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{x:Static fa:FontAwesome.fa_random}"/>
                    </Grid>
                </CheckBox>
                <CheckBox ToolTip="Repeat" IsChecked="{Binding Playlist.Repeat}" 
                              HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <Grid Width="16" Height="16">
                        <controls:AwesomeTextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{x:Static fa:FontAwesome.fa_refresh}"/>
                    </Grid>
                </CheckBox>
                <CheckBox ToolTip="Repeat Single File" IsChecked="{Binding Playlist.RepeatSingleFile}" 
                              HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <Grid Width="16" Height="16">
                        <controls:AwesomeTextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{x:Static fa:FontAwesome.fa_repeat}"/>
                    </Grid>
                </CheckBox>
                <CheckBox ToolTip="Random Chapters" IsChecked="{Binding Playlist.RandomChapters}" 
                              HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <Grid Width="16" Height="16">
                        <controls:AwesomeTextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{x:Static fa:FontAwesome.fa_bookmark}"/>
                    </Grid>
                </CheckBox>
            </ToolBar>
        </Grid>

        <DockPanel Background="White" LastChildFill="True" Name="PlayerControls" 
                   Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2">
            <DockPanel.Resources>
                <Style TargetType="Button" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" x:Key="FlatButton">
                    <Setter Property="FontFamily" Value="Webdings"/>
                    <Setter Property="FontSize" Value="20"/>
                    <Setter Property="Width" Value="30"/>
                    <Setter Property="Height" Value="30"/>
                    <Setter Property="DockPanel.Dock" Value="Left"></Setter>
                </Style>
                <Style TargetType="Button" BasedOn="{StaticResource FlatButton}">
                    <Setter Property="Focusable" Value="False"></Setter>
                </Style>
                <Style TargetType="Separator" BasedOn="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}">
                    <Setter Property="Margin" Value="4"/>
                </Style>
            </DockPanel.Resources>
            <Button ToolTip="Play / Pause" Command="{Binding TogglePlaybackCommand}">
                <Button.Style>
                    <Style TargetType="Button" BasedOn="{StaticResource FlatButton}">
                        <Setter Property="Content" Value="4"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=TimeSource.IsPlaying}" Value="True">
                                <Setter Property="Content" Value=";"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
            <Button Command="{Binding SkipToNextEventCommand}" ToolTip="Skip close to next event" Content="8"/>

            <Button Command="{Binding ToggleFullScreenCommand}" ToolTip="Toggle Fullscreen" DockPanel.Dock="Right">
                <controls:AwesomeTextBlock Text="{x:Static fa:FontAwesome.fa_arrows}"></controls:AwesomeTextBlock>
            </Button>
            <TextBlock MouseLeftButtonDown="TimeDisplay_OnMouseLeftButtonDown" TextAlignment="Right" DockPanel.Dock="Right" VerticalAlignment="Center" Width="95" Margin="0,0,8,0">
                <TextBlock.Style>
                    <Style TargetType="TextBlock">
                        <Setter Property="Text">
                            <Setter.Value>
                                <MultiBinding StringFormat="{}{0:h\:mm\:ss} / {1:h\:mm\:ss}">
                                    <Binding Path="TimeSource.Progress"/>
                                    <Binding Path="TimeSource.Duration"/>
                                </MultiBinding>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Settings.ShowTimeLeft}" Value="True">
                                <Setter Property="Text">
                                    <Setter.Value>
                                        <MultiBinding Converter="{StaticResource TimeLeftConverter}">
                                            <Binding Path="TimeSource.Progress"/>
                                            <Binding Path="TimeSource.Duration"/>
                                        </MultiBinding>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>
            <Slider VerticalAlignment="Center" Margin="16,0" Width="50" Value="{Binding Volume, Mode=TwoWay}" Minimum="0" Maximum="100" DockPanel.Dock="Right" Style="{DynamicResource VolumeSliderStyle}"></Slider>
            <Button Command="{Binding Playlist.PlayNextEntryCommand}" CommandParameter="{Binding LoadedFiles}" ToolTip="Play next video in playlist" Content=":" DockPanel.Dock="Right" />
            <Button Command="{Binding Playlist.PlayPreviousEntryCommand}" CommandParameter="{Binding LoadedFiles}" ToolTip="Play previous video in playlist" Content="9" DockPanel.Dock="Right"/>
            <shared:SeekBar SnapsToDevicePixels="True" Margin="4" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Name="SeekBar" Progress="{Binding Path=TimeSource.Progress}" Duration="{Binding Path=TimeSource.Duration}" Seek="SeekBar_OnSeek">
                <shared:SeekBar.OverlayOpacity>
                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                        <GradientStop Offset="0" Color="#20000000"/>
                        <GradientStop Offset="0.98" Color="#cc000000"/>
                        <GradientStop Offset="0.98" Color="#50000000"/>
                        <GradientStop Offset="1" Color="#50000000"/>
                    </LinearGradientBrush>
                </shared:SeekBar.OverlayOpacity>
                <shared:SeekBar.Style>
                    <Style TargetType="{x:Type shared:SeekBar}">
                        <Setter Property="Overlay" Value="Transparent"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Settings.ShowHeatMap}" Value="True">
                                <Setter Property="Overlay" Value="{Binding HeatMap}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </shared:SeekBar.Style>
            </shared:SeekBar>
        </DockPanel>

        <Grid Name="GridSettings" shared:HideOnHover.IsActive="True" Width="180" Background="White" Grid.Column="1" HorizontalAlignment="Stretch" Margin="0" Grid.Row="1" VerticalAlignment="Stretch">
            <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
                <Grid>
                    <StackPanel>
                        <TextBlock Margin="4" HorizontalAlignment="Center" Text="Settings" FontSize="20"/>

                        <StackPanel Margin="4" ToolTip="Timespan by which every script command will be delayed. Negative values will cause the commands to be executed ahead of time.">
                            <TextBlock TextAlignment="Center" Margin="0" Text="Script Delay"/>
                            <Slider Value="{Binding Path=Settings.ScriptDelay, Converter={StaticResource MillisecondsConverter}}" Margin="0,4" Minimum="-500" Maximum="500" SmallChange="25" LargeChange="100" IsSnapToTickEnabled="True" TickFrequency="25"/>
                            <TextBlock TextAlignment="Center" Margin="0" Text="{Binding Path=Settings.ScriptDelay, Converter={StaticResource MillisecondsConverter}, StringFormat={}{0:f0} ms}"/>
                        </StackPanel>
                        <Separator/>
                        <StackPanel Margin="4" ToolTip="Minimum and maximum position of the Launch. Values received from the script will be scaled accordingly.">
                            <TextBlock Margin="0" HorizontalAlignment="Center" Text="Range"/>
                            <shared:RangeSlider Margin="0,4" Minimum="0" Maximum="99" LowerValue="{Binding Settings.MinPosition, Mode=TwoWay}" UpperValue="{Binding Settings.MaxPosition, Mode=TwoWay}"/>
                            <CheckBox Content="Invert Positions" IsChecked="{Binding Settings.InvertPosition}"/>
                            <DockPanel LastChildFill="False">
                                <TextBlock Margin="4,0" Text="{Binding Settings.MinPosition}" DockPanel.Dock="Left"/>
                                <TextBlock Margin="4,0" Text="{Binding Settings.MaxPosition}" DockPanel.Dock="Right"/>
                            </DockPanel>
                            <Grid>
                                <Grid.Resources>
                                    <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Static ToolBar.RadioButtonStyleKey}}">
                                        <Setter Property="HorizontalAlignment" Value="Stretch"></Setter>
                                    </Style>
                                </Grid.Resources>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <RadioButton Grid.Column="0" HorizontalAlignment="Stretch" IsChecked="{Binding Path=Settings.FilterMode, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PositionFilterMode.FullRange}}" Content="F" ToolTip="Full Range" />
                                <RadioButton Grid.Column="1" HorizontalAlignment="Stretch" IsChecked="{Binding Path=Settings.FilterMode, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PositionFilterMode.Top}}" Content="T" ToolTip="Top" />
                                <RadioButton Grid.Column="2" HorizontalAlignment="Stretch" IsChecked="{Binding Path=Settings.FilterMode, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PositionFilterMode.Middle}}" Content="M" ToolTip="Middle" />
                                <RadioButton Grid.Column="3" HorizontalAlignment="Stretch" IsChecked="{Binding Path=Settings.FilterMode, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PositionFilterMode.Bottom}}" Content="B" ToolTip="Bottom" />
                                <RadioButton Grid.Column="4" HorizontalAlignment="Stretch" IsChecked="{Binding Path=Settings.FilterMode, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PositionFilterMode.SineWave}}" Content="S" ToolTip="Sine Wave" />
                                <RadioButton Grid.Column="5" HorizontalAlignment="Stretch" IsChecked="{Binding Path=Settings.FilterMode, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static viewModels:PositionFilterMode.TopBottom}}" Content="TB" ToolTip="Top / Bottom" />
                            </Grid>
                            <Slider Margin="0,4" Minimum="0.1" Maximum="0.9" Value="{Binding Settings.FilterRange}" ToolTip="Filter Range"/>
                            <TextBlock Margin="4,0" Text="{Binding Settings.FilterRange, StringFormat={}{0:p0}}" HorizontalAlignment="Stretch" TextAlignment="Center"/>
                            <shared:RangePreview Ranges="{Binding FilterRanges}" HorizontalAlignment="Stretch" Height="80"/>
                        </StackPanel>
                        <Separator/>
                        <StackPanel Margin="4" ToolTip="Minimum and maximum speed of the Launch.">
                            <TextBlock Margin="0" HorizontalAlignment="Center" Text="Speed"/>
                            <shared:RangeSlider Margin="0,4" Minimum="0" Maximum="99" LowerValue="{Binding Settings.MinSpeed, Mode=TwoWay}" UpperValue="{Binding Settings.MaxSpeed, Mode=TwoWay}"/>
                            <DockPanel LastChildFill="False">
                                <TextBlock Margin="4,0" Text="{Binding Settings.MinSpeed}" DockPanel.Dock="Left"/>
                                <TextBlock Margin="4,0" Text="{Binding Settings.MaxSpeed}" DockPanel.Dock="Right"/>
                            </DockPanel>
                        </StackPanel>

                        <StackPanel Margin="4" ToolTip="Static multiplier that is applied after the automatic speed detection.">
                            <TextBlock Margin="0" Text="Speed Multiplier" TextAlignment="Center"/>
                            <Slider Margin="0,4" Minimum="0.1" Maximum="5.0" Value="{Binding Settings.SpeedMultiplier}"  IsSnapToTickEnabled="True" TickFrequency="0.1"/>
                            <TextBlock Margin="0" Text="{Binding Settings.SpeedMultiplier, StringFormat={}x{0:f1}}" TextAlignment="Center"/>
                        </StackPanel>

                        <StackPanel Margin="4" ToolTip="Playback Rate">
                            <TextBlock Margin="0" Text="Playback Rate" TextAlignment="Center"/>
                            <Slider Margin="0,4" Minimum="0.1" Maximum="2.0" Value="{Binding TimeSource.PlaybackRate}" IsSnapToTickEnabled="True" TickFrequency="0.1"/>
                            <TextBlock Margin="0" Text="{Binding TimeSource.PlaybackRate, StringFormat={}x{0:f1}}" TextAlignment="Center"/>
                        </StackPanel>

                        <Separator/>

                        <StackPanel Margin="4" ToolTip="Minimal delay between two script commands">
                            <TextBlock Margin="0" Text="Min Command Delay" TextAlignment="Center"/>
                            <Slider LargeChange="1" Margin="0,4" Minimum="10" Maximum="300"  Value="{Binding Path=Settings.CommandDelay, Converter={StaticResource MillisecondsConverter}}"  SmallChange="1"  IsSnapToTickEnabled="True" TickFrequency="1"/>
                            <TextBlock Margin="0" Text="{Binding Path=Settings.CommandDelay, Converter={StaticResource MillisecondsConverter}, StringFormat={}{0:f0} ms}" TextAlignment="Center"/>
                        </StackPanel>

                        <StackPanel Margin="4" ToolTip="Will automatically skip command gaps of more than 10s.">
                            <CheckBox IsChecked="{Binding Settings.AutoSkip}" Content="Auto-Skip Gaps"/>
                        </StackPanel>

                        <StackPanel Margin="4" ToolTip="Determines how beat files are converted to movements">
                            <TextBlock Margin="0" Text="Beat Conversion Mode" TextAlignment="Center"/>
                            <ComboBox ItemsSource="{Binding ConversionModes}" SelectedItem="{Binding Settings.ConversionMode}">
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding Converter={StaticResource ConversionConverter}}"/>
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                            </ComboBox>
                        </StackPanel>

                        <Separator/>

                        <StackPanel ToolTip="Defines the command source">
                            <StackPanel.Resources>
                                <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Static ToolBar.RadioButtonStyleKey}}">
                                    <Setter Property="HorizontalAlignment" Value="Stretch"></Setter>
                                </Style>
                            </StackPanel.Resources>
                            <TextBlock Margin="4,8,4,4" HorizontalAlignment="Center" Text="Source" FontSize="20"/>

                            <RadioButton IsChecked="{Binding Path=CommandSource, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static scriptPlayer:CommandSource.Video}}" Content="Video" />
                            <RadioButton IsChecked="{Binding Path=CommandSource, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static scriptPlayer:CommandSource.None}}" Content="None" />
                            <RadioButton IsChecked="{Binding Path=CommandSource, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static scriptPlayer:CommandSource.Random}}" Content="Random" />
                            <RadioButton IsChecked="{Binding Path=CommandSource, Converter={StaticResource BooleanConverter}, ConverterParameter={x:Static scriptPlayer:CommandSource.Pattern}}" Content="Pattern" />

                            <ComboBox ItemsSource="{Binding Patterns}" SelectedItem="{Binding SelectedPattern}" DisplayMemberPath="Name" Margin="4" />
                            <TextBlock Margin="0" Text="Pattern Speed" TextAlignment="Center"/>
                            <Slider LargeChange="10" Margin="0,4" Minimum="100" Maximum="1000"  Value="{Binding Path=Settings.PatternSpeed, Converter={StaticResource MillisecondsConverter}}"  SmallChange="10"  IsSnapToTickEnabled="True" TickFrequency="10"/>
                            <TextBlock Margin="0" Text="{Binding Path=Settings.PatternSpeed, Converter={StaticResource MillisecondsConverter}, StringFormat={}{0:f0} ms}" TextAlignment="Center"/>
                        </StackPanel>

                        <Separator/>

                        <TextBlock Margin="4,8,4,4" HorizontalAlignment="Center" Text="Debug" FontSize="20"/>
                        <CheckBox Margin="4" IsChecked="{Binding Settings.ShowHeatMap}">Show Heat Map</CheckBox>
                        <CheckBox Margin="4" IsChecked="{Binding Settings.ShowScriptPositions}">Show Script Positions</CheckBox>
                        <TextBlock Margin="4" Text="Test Patterns"/>
                        <ComboBox ItemsSource="{Binding TestPatterns}" SelectedItem="{Binding SelectedTestPattern}" DisplayMemberPath="Name" Margin="4" />
                        <Button Command="{Binding ExecuteSelectedTestPatternCommand}" Margin="4,0,4,4" Content="Execute Pattern" VerticalAlignment="Top"/>
                        <CheckBox IsChecked="{Binding Settings.LogMarkers}" Margin="4" Content="Log Markers"/>
                        <CheckBox IsChecked="{Binding BlurVideo}" Margin="4" Content="Blur Video"/>
                    </StackPanel>
                    <CheckBox Padding="0" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" VerticalAlignment="Top" Margin="3" Focusable="False" Style="{StaticResource {x:Static ToolBar.CheckBoxStyleKey}}" Width="24" Height="24" HorizontalAlignment="Left"
                              IsChecked="{Binding ElementName=GridSettings, Path=(shared:HideOnHover.IsActive), Mode=TwoWay, Converter={StaticResource Inverter}}">
                        <TextBlock Text="🖈" Padding="0" Margin="0" FontSize="18"/>
                    </CheckBox>
                </Grid>
            </ScrollViewer>
        </Grid>
    </Grid>
</Window>